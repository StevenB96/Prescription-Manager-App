Nice — below is a complete, drop-in set of helpers and views you can add to your Django app so your site will:

register a user via the OAuth service,

log in by obtaining an access token (password grant),

store the token in the Django session,

protect view endpoints by verifying the session token (and redirecting to login when missing/expired).

Two important notes up-front (so you don't waste time trying to refresh tokens that won't work):

The OAuth service code you posted implements grant_type=password and grant_type=authorization_code in the /token/ view, but does not implement grant_type=refresh_token. So this implementation cannot silently refresh an expired access token — it will force the user to re-login. I added code that checks expiry and redirects to login when expired.

Configure the OAuth service base URL and client credentials in settings.py (example below).

What to add
1) Settings you should add (e.g. in settings.py)
# OAuth service base URL (no trailing slash)
OAUTH_SERVICE_URL = "http://localhost:8000/oauth"  # change to the URL where your oauth_service is mounted
OAUTH_CLIENT_ID = "mobile-client"                  # or "web-client" depending on which client you want to use
OAUTH_CLIENT_SECRET = "mobilesecret"               # required for the password grant in your current seed

2) New file: prescription_manager_app/prescription_manager_app/views/auth.py

Create views/auth.py (this is the module referenced by urls.py in your project already). It implements register, login, logout, and helper functions.

# prescription_manager_app/prescription_manager_app/views/auth.py

import time
import requests
from django.conf import settings
from django.shortcuts import render, redirect
from django.urls import reverse
from django.views.decorators.http import require_http_methods

# If you prefer JSON-based login/registration, you can adapt these views easily.
OAUTH_BASE = getattr(settings, "OAUTH_SERVICE_URL", "http://localhost:8000/oauth")
CLIENT_ID = getattr(settings, "OAUTH_CLIENT_ID", None)
CLIENT_SECRET = getattr(settings, "OAUTH_CLIENT_SECRET", None)

REGISTER_ENDPOINT = f"{OAUTH_BASE}/register-client/"
TOKEN_ENDPOINT = f"{OAUTH_BASE}/token/"
USERINFO_ENDPOINT = f"{OAUTH_BASE}/userinfo/"


@require_http_methods(["GET", "POST"])
def register(request):
    """
    Register a new user by calling the oauth service /register-client/ endpoint.
    On success redirect to login.
    """
    if request.method == "GET":
        return render(request, "prescription_manager_app/auth/registration.html")

    # POST
    email = request.POST.get("email")
    password = request.POST.get("password")

    if not email or not password:
        return render(request, "prescription_manager_app/auth/registration.html", {
            "error": "Missing email or password",
            "email": email,
        })

    try:
        resp = requests.post(REGISTER_ENDPOINT, json={"email": email, "password": password}, timeout=5)
    except requests.RequestException as exc:
        return render(request, "prescription_manager_app/auth/registration.html", {
            "error": f"Failed to contact auth service: {exc}"
        })

    if resp.status_code in (200, 201):
        return redirect(reverse("prescription_manager_app:login"))
    else:
        # attempt to show error from the oauth service
        try:
            body = resp.json()
            msg = body.get("error") or body.get("message") or resp.text
        except Exception:
            msg = resp.text
        return render(request, "prescription_manager_app/auth/registration.html", {"error": msg})


@require_http_methods(["GET", "POST"])
def login(request):
    """
    Log in by exchanging username/password for an access token using password grant.
    Resulting tokens are stored in the Django session:
      session['access_token'], session['refresh_token'], session['expires_at']
    """
    if request.method == "GET":
        return render(request, "prescription_manager_app/auth/login.html")

    email = request.POST.get("email")
    password = request.POST.get("password")

    if not all([email, password, CLIENT_ID, CLIENT_SECRET]):
        return render(request, "prescription_manager_app/auth/login.html", {
            "error": "Missing credentials or server misconfiguration."
        })

    payload = {
        "grant_type": "password",
        "email": email,
        "password": password,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
    }

    try:
        resp = requests.post(TOKEN_ENDPOINT, json=payload, timeout=5)
    except requests.RequestException as exc:
        return render(request, "prescription_manager_app/auth/login.html", {
            "error": f"Failed to contact auth server: {exc}"
        })

    if resp.status_code != 200:
        try:
            body = resp.json()
            msg = body.get("error") or resp.text
        except Exception:
            msg = resp.text
        return render(request, "prescription_manager_app/auth/login.html", {"error": msg})

    token_data = resp.json()
    access_token = token_data.get("access_token")
    refresh_token = token_data.get("refresh_token")
    expires_in = token_data.get("expires_in", 0)

    if not access_token:
        return render(request, "prescription_manager_app/auth/login.html", {"error": "No access token returned"})

    # store into session
    now = int(time.time())
    request.session["access_token"] = access_token
    request.session["refresh_token"] = refresh_token
    request.session["expires_at"] = now + int(expires_in)
    # optional: you can store client_id for later use
    request.session["oauth_client_id"] = CLIENT_ID

    # attempt to fetch userinfo (optional)
    try:
        info_resp = requests.get(USERINFO_ENDPOINT, headers={"Authorization": f"Bearer {access_token}"}, timeout=5)
        if info_resp.status_code == 200:
            request.session["oauth_userinfo"] = info_resp.json()
    except requests.RequestException:
        # not critical; ignore
        pass

    # redirect to next or to admin home
    next_url = request.GET.get("next") or reverse("prescription_manager_app:home")
    return redirect(next_url)


@require_http_methods(["POST"])
def logout(request):
    """
    Clear session tokens.
    """
    request.session.pop("access_token", None)
    request.session.pop("refresh_token", None)
    request.session.pop("expires_at", None)
    request.session.pop("oauth_userinfo", None)
    return redirect(reverse("prescription_manager_app:login"))


Place the templates in the paths referenced (prescription_manager_app/auth/login.html and .../registration.html) — simple forms are enough, see quick examples below.

3) Templates (very small examples)

prescription_manager_app/prescription_manager_app/templates/prescription_manager_app/auth/login.html

{% extends 'prescription_manager_app/admin/base.html' %}
{% block content %}
<h2>Login</h2>
{% if error %}<p style="color: red;">{{ error }}</p>{% endif %}
<form method="post">{% csrf_token %}
  <label>Email <input type="email" name="email" required></label><br>
  <label>Password <input type="password" name="password" required></label><br>
  <button type="submit">Login</button>
</form>
{% endblock %}


prescription_manager_app/prescription_manager_app/templates/prescription_manager_app/auth/registration.html

{% extends 'prescription_manager_app/admin/base.html' %}
{% block content %}
<h2>Register</h2>
{% if error %}<p style="color: red;">{{ error }}</p>{% endif %}
<form method="post">{% csrf_token %}
  <label>Email <input type="email" name="email" required></label><br>
  <label>Password <input type="password" name="password" required></label><br>
  <button type="submit">Register</button>
</form>
{% endblock %}

4) Decorator to protect views that require OAuth authentication

Create prescription_manager_app/prescription_manager_app/utils/oauth.py:

# prescription_manager_app/prescription_manager_app/utils/oauth.py

import time
import requests
from functools import wraps
from django.shortcuts import redirect
from django.urls import reverse
from django.conf import settings

OAUTH_BASE = getattr(settings, "OAUTH_SERVICE_URL", "http://localhost:8000/oauth")
TOKEN_ENDPOINT = f"{OAUTH_BASE}/token/"
USERINFO_ENDPOINT = f"{OAUTH_BASE}/userinfo/"
CLIENT_ID = getattr(settings, "OAUTH_CLIENT_ID", None)
CLIENT_SECRET = getattr(settings, "OAUTH_CLIENT_SECRET", None)


def oauth_login_required(view_func):
    """
    Decorator that ensures a valid (non-expired) access token is present in session.
    If token missing or expired -> redirect to login page.
    NOTE: your oauth_service does not have 'refresh_token' grant implemented,
    so this decorator will not refresh an expired token automatically.
    """
    @wraps(view_func)
    def _wrapped(request, *args, **kwargs):
        access_token = request.session.get("access_token")
        expires_at = request.session.get("expires_at", 0)

        now = int(time.time())
        if not access_token or expires_at <= now:
            # token absent or expired — require fresh login
            return redirect(f"{reverse('prescription_manager_app:login')}?next={request.path}")

        # Optionally validate token by calling userinfo (light check)
        try:
            resp = requests.get(USERINFO_ENDPOINT, headers={"Authorization": f"Bearer {access_token}"}, timeout=3)
            if resp.status_code != 200:
                # invalid token — force login
                return redirect(f"{reverse('prescription_manager_app:login')}?next={request.path}")
            # attach user info to request for use in view
            request.oauth_user = resp.json()
        except requests.RequestException:
            # If userinfo couldn't be contacted, we still allow access (or you can choose to deny).
            # Here we allow access but attach minimal info.
            request.oauth_user = request.session.get("oauth_userinfo")

        return view_func(request, *args, **kwargs)

    return _wrapped

5) Example: protect your facility views

Open prescription_manager_app/prescription_manager_app/views/facility.py and import/decorate the create/update/delete handlers:

# top of file
from prescription_manager_app.utils.oauth import oauth_login_required

# then decorate the handlers that require authentication
@require_http_methods(["GET", "POST"])
@oauth_login_required
def facility_create(request):
    ...


Do the same for facility_update, facility_delete, and any other view that needs protection.

6) Update URLs (already present in your urls.py)

Your prescription_manager_app/prescription_manager_app/urls.py already references:

# ...
path('register/', views.auth.register, name='register'),
path('login/', views.auth.login, name='login'),


Make sure Django loads the new views/auth.py module (i.e. views.auth points to views/auth.py). If views/__init__.py doesn't import auth, either import or reference with the full path.

7) Additional notes & recommendations

Refresh tokens: your oauth service seed data includes refresh_token values in clients, but the token endpoint does not currently implement the refresh grant. If you want automatic refresh, add grant_type == "refresh_token" handling to the oauth service token endpoint (issue a new access token when valid refresh token is submitted).

Storing tokens: storing access tokens in server-side sessions (Django session) is fine for server-rendered pages. For APIs or SPAs you’d store them differently (in memory or client storage) and follow PKCE for public clients.

Logout on server: consider revoking tokens server-side (add a revoke endpoint in oauth_service) if you want to fully logout.

CSRF & forms: the login/registration forms above use standard CSRF tokens. If you call them programmatically (JSON), handle them accordingly or mark endpoints @csrf_exempt when appropriate (careful with security).

HTTPS: never send client_secret or passwords over plain HTTP in production.